/**
 * Sportradar NFL API
 * Sportradar’s NFL API v7 offers a comprehensive suite of game and seasonal stats. Whether you are looking for the fastest gameday updates, your favorite player’s season stats, or in-depth subjective statistics, Sportradar has you covered.  All game data feeds update in real-time as games are played and are compiled via expert Sportradar in-house operators. All NFL games – including preseason – feature full coverage.  Primary feeds will return schedules, standings, team/player data, and real-time scores.  Additional feeds provide a host of complimentary stats, including: * Team rosters * Depth charts * Weekly injuries * Seasonal statistics * Subjective statistics * Draft information  Real-time customers are also offered four delivery Push Feeds to enhance speed.  The easiest way to get started with the API is to click the fork button to fork this collection to your own workspace and use Postman to send requests.  # Overview  1.  You need a valid API Key to send requests to the API endpoints. You can get your free trial key by registering an account and creating an application from our [Developer Portal](https://developer.sportradar.com/). 2.  Once you have your sport specific key, replace the value `{Your API Key}` with your API key and click the save icon (or click the Meatballs Menu and select \"Save\") 3.  By default, responses to every request are sent in JSON. If you prefer XML, you can change the variable by clicking the \"Variables\" tab and replacing the Current Value for format to xml. 4.  Select an endpoint from the NFL v7 menu on the left, then click \"Send\" on the resulting screen. 5.  The API calls will respond with appropriate [HTTP response codes](https://developer.sportradar.com/docs/read/Home#http-response-codes) for all requests. Within Postman Client, when a response is received, the status code is highlighted and is accompanied by a help text that indicates the possible meaning of the response code. A 200 OK indicates all went well, while 4XX or 5XX response codes indicate an error from the requesting client or our API servers respectively. 6.  Data for the requested endpoint is displayed in the Body section below.  # Other Resources  The [API Map](https://developer.sportradar.com/docs/read/american_football/NFL_v7#nfl-v7-api-map) on our Developer Portal illustrates how to obtain the parameters you will need to access the API.  The [Statistics Summary](https://developer.sportradar.com/files/Sportradar_NFL_v7_Statistics_Summary.pdf) provides a high-level overview of all the data points provided within the whole API, giving you an “at a glance” view of the data we offer.  The [Documentation](https://developer.sportradar.com/files/Sportradar_NFL_v7_Statistics_Feeds.pdf) provides a list of endpoints for the API with basic descriptions. When applicable, we include information on the Coverage Levels provided for the API. This document also includes descriptions of each data point and information about where each data point can be found within the API.  [Frequently Asked Questions](https://developer.sportradar.com/docs/read/american_football/NFL_v7#frequently-asked-questions) about the API can be found on the Developer Portal and in the Documentation mentioned above.  The [Change Log](https://developer.sportradar.com/files/NFL_API_v7_Change_Log.pdf) provides a list of changes and updates to this version of the API since the initial release of the API version.  If you need further information, contact our support team:   Email: [support@sportradar.com](mailto:support@sportradar.com)
 *
 * The version of the OpenAPI document: 8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable }                                        from 'rxjs';



import { Configuration }                                     from '../configuration';


export interface DefaultSportradarNflApiServiceInterface {
    defaultHeaders: {};
    configuration: Configuration;

    /**
    * Current Season Schedule
    * Provides schedule information for the current season, including venue and broadcast info, and scoring results by quarter.
    * @param locale (Required) Locale used for translations
    * @param format 
    */
    currentSeasonSchedule(locale: string, format: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Current Week Schedule
    * Provides schedule information for the current week, including venue and broadcast info, and scoring results by quarter.
    * @param locale (Required) Locale used for translations
    * @param format 
    */
    currentWeekSchedule(locale: string, format: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Daily Change Log
    * Provides IDs and timestamps for teams, players, game statistics, schedules, and standings that have been modified on a given date. To receive the data updates, use these unique IDs to pull relevant API feeds.
    * @param locale (Required) Locale used for translations
    * @param year (Required) Year in 4 digit format
    * @param month (Required) Month in 2 digit format
    * @param day (Required) Day in 2 digit format
    * @param format 
    */
    dailyChangeLog(locale: string, year: number, month: number, day: number, format: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Daily Transactions
    * Provides IDs and timestamps for teams, players, game statistics, schedules, and standings that have been modified on a given date. To receive the data updates, use these unique IDs to pull relevant API feeds.
    * @param locale (Required) Locale used for translations
    * @param year (Required) Year in 4 digit format
    * @param month (Required) Month in 2 digit format
    * @param day (Required) Day in 2 digit format
    * @param format 
    */
    dailyTransactions(locale: string, year: number, month: number, day: number, format: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Draft Summary
    * Provides pre-draft pick order with live pick selections during the draft. Displays information on draft rounds, picks, teams, and prospects for a given draft year.
    * @param locale (Required) Locale used for translations
    * @param year (Required) Year in 4 digit format
    * @param format 
    */
    draftSummary(locale: string, year: number, format: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Game Boxscore
    * Provides game scoring information for each team, including complete play-by-play information for all scoring drives.
    * @param locale (Required) Locale used for translations
    * @param game_id (Required) ID of a game
    * @param format 
    */
    gameBoxscore(locale: string, game_id: string, format: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Game Roster
    * Provides complete game roster information for each team, including game status and player profile data.
    * @param locale (Required) Locale used for translations
    * @param game_id (Required) ID of a game
    * @param format 
    */
    gameRoster(locale: string, game_id: string, format: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Game Statistics
    * Provides extensive team and player level game statistics for each team.
    * @param locale (Required) Locale used for translations
    * @param game_id (Required) ID of a game
    * @param format 
    */
    gameStatistics(locale: string, game_id: string, format: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * League Hierarchy
    * Provides top-level information for each team, including conference and division distinction, venue information, and team colors.
    * @param locale (Required) Locale used for translations
    * @param format 
    */
    leagueHierarchy(locale: string, format: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Play By Play
    * Provides a live play-by-play timeline, including possession and location information as well as all team and player statistics earned on each play.
    * @param locale (Required) Locale used for translations
    * @param game_id (Required) ID of a game
    * @param format 
    */
    playByPlay(locale: string, game_id: string, format: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Player Profile
    * Provides player biographical information, draft information, and seasonal statistics for the regular season and postseason.
    * @param locale (Required) Locale used for translations
    * @param player_id (Required) ID of a player
    * @param format 
    */
    playerProfile(locale: string, player_id: string, format: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Postgame Standings
    * Provides standings information for each team, updated postgame.
    * @param locale (Required) Locale used for translations
    * @param year (Required) Year in 4 digit format
    * @param season_type (Required) Season type as Preseason (PRE), Regular (REG), or Postseason (PST)
    * @param format 
    */
    postgameStandings(locale: string, year: number, season_type: string, format: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Prospects
    * Provides a list of upcoming or historical draft prospects for a given year.
    * @param locale (Required) Locale used for translations
    * @param year (Required) Year in 4 digit format
    * @param format 
    */
    prospects(locale: string, year: number, format: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Season Schedule
    * Provides complete schedule information for a given season, including venue and broadcast info, and scoring results by quarter.
    * @param locale (Required) Locale used for translations
    * @param year (Required) Year in 4 digit format
    * @param season_type (Required) Season type as Preseason (PRE), Regular (REG), or Postseason (PST)
    * @param format 
    */
    seasonSchedule(locale: string, year: number, season_type: string, format: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Seasonal Statistics
    * Provides complete team and player seasonal statistics for a given season and season type.
    * @param locale (Required) Locale used for translations
    * @param year (Required) Year in 4 digit format
    * @param season_type (Required) Season type as Preseason (PRE), Regular (REG), or Postseason (PST)
    * @param team_id (Required) ID of a team
    * @param format 
    */
    seasonalStatistics(locale: string, year: number, season_type: string, team_id: string, format: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Seasons
    * Provides a list of all available seasons, including preseasons and postseasons.
    * @param locale (Required) Locale used for translations
    * @param format 
    */
    seasons(locale: string, format: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Team Draft Summary
    * Provides pre-draft pick order with live pick selections during the draft for a given team.
    * @param locale (Required) Locale used for translations
    * @param year (Required) Year in 4 digit format
    * @param team_id (Required) ID of a team
    * @param format 
    */
    teamDraftSummary(locale: string, year: number, team_id: string, format: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Team Profile
    * Provides franchise team information, as well as a roster of active players.
    * @param locale (Required) Locale used for translations
    * @param team_id (Required) ID of a team
    * @param format 
    */
    teamProfile(locale: string, team_id: string, format: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Team Roster
    * Provides franchise team information, as well as the complete roster of players.
    * @param locale (Required) Locale used for translations
    * @param team_id (Required) ID of a team
    * @param format 
    */
    teamRoster(locale: string, team_id: string, format: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Top Prospects
    * Provides a list of the top prospects for a given year.
    * @param locale (Required) Locale used for translations
    * @param year (Required) Year in 4 digit format
    * @param format 
    */
    topProspects(locale: string, year: number, format: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Trades
    * Provides summary details of all in-draft trades.
    * @param locale (Required) Locale used for translations
    * @param year (Required) Year in 4 digit format
    * @param format 
    */
    trades(locale: string, year: number, format: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Weekly Depth Charts
    * Provides depth chart information for each team for a given week.
    * @param locale (Required) Locale used for translations
    * @param year (Required) Year in 4 digit format
    * @param season_type (Required) Season type as Preseason (PRE), Regular (REG), or Postseason (PST)
    * @param week_number (Required) Week number as an integer
    * @param format 
    */
    weeklyDepthCharts(locale: string, year: number, season_type: string, week_number: number, format: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Weekly Injuries
    * Provides a list of injured players for each team for a given week, including practice status.
    * @param locale (Required) Locale used for translations
    * @param year (Required) Year in 4 digit format
    * @param season_type (Required) Season type as Preseason (PRE), Regular (REG), or Postseason (PST)
    * @param week_number (Required) Week number as an integer
    * @param format 
    */
    weeklyInjuries(locale: string, year: number, season_type: string, week_number: number, format: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Weekly Schedule
    * Provides complete schedule information for a given week of the season, including venue, weather conditions, broadcast info, and scoring results by quarter.
    * @param locale (Required) Locale used for translations
    * @param year (Required) Year in 4 digit format
    * @param season_type (Required) Season type as Preseason (PRE), Regular (REG), or Postseason (PST)
    * @param week_number (Required) Week number as an integer
    * @param format 
    */
    weeklySchedule(locale: string, year: number, season_type: string, week_number: number, format: string, extraHttpRequestParams?: any): Observable<{}>;

}
